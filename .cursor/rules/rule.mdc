---
description: AeroJS JavaScript エンジン コーディング規約
globs: ["**/*.{cpp,h,hpp,c,cc}"]
alwaysApply: true
---

# AeroJS コーディング規約

## 1. 一般原則

### 1.1 コードの品質
- コードは明確で読みやすく、自己説明的であること
- 複雑なロジックや最適化には必ずコメントを付けること
- コンパイラの警告は全て解消すること（-Wall -Wextra -Werror レベル）
- テストカバレッジは可能な限り高く保つこと（最低95%以上）
- サイクロマチック複雑度が15を超える関数は避けること
- 単一責任の原則に従い、1つの関数/クラスは1つの機能に集中すること

### 1.2 パフォーマット
- インデントはスペース2文字
- 波括弧は同じ行に置く（K&Rスタイル）
- 命名規則を厳密に守ること
- コードフォーマッタ（clang-format）を必ず使用すること
- 空白行を効果的に使用して論理的なセクションを分けること
- 演算子の前後、カンマの後にはスペースを入れること
- フォーマットの一貫性を保つためGitフックを設定すること

### 1.3 ファイル構成
- ヘッダーファイルには適切なインクルードガードを使用すること
- 実装ファイルは対応するヘッダーファイルを最初にインクルードすること
- インクルードはアルファベット順に整理すること
- ファイルは最低5000行書くこと。
- ファイル構成は以下の順序に従うこと:
  1. ライセンスヘッダー
  2. インクルードガード（ヘッダーファイルの場合）
  3. インクルード
  4. 名前空間宣言
  5. 前方宣言
  6. constexpr変数
  7. 型定義
  8. クラス宣言
  9. 関数宣言/定義

### 1.4 コード構造
- 深いネストは避け、早期リターンを使用すること
- 関数の長さは50行以内に保つこと
- 関数の引数は5つ以下に保つこと
- 状態変更を最小限に抑え、副作用を明示的にすること
- 継承よりもコンポジションを優先すること
- インターフェイスと実装を明確に分離すること
- 循環的な依存関係を避けること

## 2. 命名規則

### 2.1 一般規則
- プロジェクト全体で一貫した命名規則を使用すること
- 略語は一般的なもののみ使用し、必要に応じて用語集に記載すること
- 名前は意図を明確に示し、詳細すぎる/抽象的すぎる名前は避けること
- 否定形の変数名は避けること（例: `notVisible`より`isHidden`）
- 意味のない接頭辞/接尾辞は避けること
- 名前の長さは意味と範囲に比例させること（広い範囲で使用される変数は明確な名前にする）
- 制御変数と一時変数以外は単一文字の変数名を避けること

### 2.2 具体的な命名規則
- **クラス名**: 大文字で始まるキャメルケース（例: `JITCompiler`, `BytecodeGenerator`）
- **関数名**: 小文字で始まるキャメルケース（例: `compileFunction`, `optimizeCode`）
- **変数名**: 小文字で始まるキャメルケース（例: `objectCount`, `stringTable`）
- **定数**: すべて大文字、アンダースコア区切り（例: `MAX_HEAP_SIZE`, `DEFAULT_STACK_LIMIT`）
- **メンバ変数**: `m_` プレフィックス使用（例: `m_heapSize`, `m_objectPool`）
- **静的変数**: `s_` プレフィックス使用（例: `s_instanceCount`, `s_engineRegistry`）
- **グローバル変数**: `g_` プレフィックス使用（例: `g_engineInstance`, `g_mainContext`）
- **Enum値**: 大文字で始まるキャメルケース（例: `TokenType::StringLiteral`, `ObjectFlag::Frozen`）
- **マクロ**: すべて大文字、`AEROJS_` プレフィックス使用（例: `AEROJS_ASSERT`, `AEROJS_LOG_ERROR`）
- **名前空間**: 小文字（例: `aerojs`, `aerojs::runtime`）
- **テンプレート型パラメータ**: 大文字一文字または`T`プレフィックス使用（例: `T`, `TValue`）
- **ブール変数**: `is`, `has`, `should`, `can`などのプレフィックス使用（例: `isInitialized`, `hasProperty`）
- **インターフェース/抽象クラス**: `I`プレフィックス使用（例: `ICompiler`, `IOptimizer`）

### 2.3 ファイル命名
- ヘッダーファイル: `.h`または`.hpp`拡張子
- 実装ファイル: `.cpp`拡張子
- インライン定義: `.inl`拡張子
- プラットフォーム固有ファイル: `<名前>_<プラットフォーム>.<拡張子>`（例: `memory_windows.cpp`）
- ファイル名はクラス名と一致させること（1ファイル1クラスの原則）

## 3. コメント規則

### 3.1 コメントスタイル
- クラス、構造体、関数には必ずドキュメンテーションコメントを付けること
- 複雑なロジック、非自明な最適化、バグ対策には説明コメントを付けること
- コメントは「何を」ではなく「なぜ」を説明すること
- 未実装のところにはTODOをつけること
- ハイフンやアスタリスクを使ったアスキーアートによる区切りは避けること
- コメントは常に最新の状態に保つこと（古いコメントは削除/更新すること）
- 自明なコードにはコメントを付けないこと

### 3.2 ドキュメンテーションフォーマット
- すべての公開API関数には以下を含むドキュメントコメントを付けること:
  - 関数の目的と機能の詳細な説明
  - 各パラメータの型、意味、有効範囲、デフォルト値（ある場合）
  - 戻り値の型と意味
  - 発生し得る例外/エラー条件と対処方法
  - スレッド安全性についての情報
  - パフォーマンス特性（計算量など）
  - 使用例（必要に応じて）
  - 関連する関数やクラスへの参照
- クラスドキュメントには以下を含めること:
  - クラスの責任と目的
  - 使用パターン（シングルトン、ファクトリなど）
  - 継承関係
  - スレッド安全性
  - ライフサイクル情報


## 4. C++言語機能の使用

### 4.1 言語標準
- C++20標準に準拠すること
- コンパイラ固有の拡張機能は極力避けること
- 使用するC++17/20の新機能は互換性とパフォーマンスを確認すること
- 推奨C++20機能:
  - コンセプト（型制約の明確化）
  - `constexpr`仮想関数
  - 範囲ベースforループの初期化式
  - designated initializers
  - `std::span`
  - `consteval`
  - モジュール（プロジェクト全体がサポートする場合）

### 4.2 機能の使用ガイドライン
- **スマートポインタ**: 
  - 生ポインタより`std::unique_ptr`/`std::shared_ptr`を優先すること
  - 所有権が明確な場合は`unique_ptr`を使用
  - 共有所有権が必要な場合のみ`shared_ptr`を使用
  - 循環参照を避けるため`weak_ptr`を適切に使用
  - カスタムデリータは必要な場合のみ使用

- **ラムダ式**: 
  - 短い関数やコールバックに積極的に使用すること
  - キャプチャリストは明示的に指定すること（`[=]`や`[&]`の使用は避ける）
  - 複雑なラムダは名前付き関数に分離すること
  - 再利用するラムダは変数に格納すること

- **auto**: 
  - 型が明らかな場合や長いイテレータ型に使用すること
  - 戻り値型としての`auto`は読みやすさを向上させる場合のみ使用
  - 初期化式の型が明確でない場合は使用を避ける
  - `auto&&`はユニバーサルリファレンスとして慎重に使用

- **範囲ベースfor**: 
  - 配列やコンテナのイテレーションには常に使用すること
  - 要素を変更する場合は参照を使用（`for (auto& elem : container)`）
  - 要素が重い場合はコピーを避けるために参照を使用

- **constexpr**: 
  - コンパイル時計算可能な関数や変数には積極的に使用すること
  - パフォーマンスクリティカルな定数計算に活用
  - 型特性や数学関数に利用
  - コンパイル時エラーチェックに利用

- **テンプレート**: 
  - 複雑なテンプレートメタプログラミングは避けること
  - コンセプトを使用して型制約を明示すること
  - 特殊化は明確な理由がある場合のみ使用
  - 可変引数テンプレートは適切な場面で使用

- **例外**: 
  - JITエンジン内での例外使用は避け、エラーコードを返すこと
  - パフォーマンスクリティカルなコードでは使用しない
  - 回復不可能なエラーに対しては例外を検討
  - すべての例外はキャッチされることを確認

- **RTTI**: 
  - パフォーマンス上の理由から使用を避けること
  - 代わりにタグ付き共用体や型IDを使用
  - デバッグビルドでのみ使用することを検討

### 4.3 明示的に禁止する機能
- グローバル変数（設定定数を除く）
- `goto` 文
- C形式のキャスト（代わりに`static_cast`、`reinterpret_cast`などを使用）
- マクロによる機能実装（デバッグ支援を除く）
- 深い継承階層（3レベル以上）
- `auto_ptr`（非推奨）
- C形式の文字列操作（`strcpy`、`sprintf`など）
- `malloc`/`free`（代わりに`new`/`delete`またはスマートポインタを使用）
- `std::bind`（代わりにラムダを使用）
- `rand()`（代わりに`<random>`ライブラリを使用）
- `using namespace std`
- 名前空間汚染
- 型消去（型安全性を損なうため）
- 無意味な可視性の変更

## 5. パフォーマンスとメモリ

### 5.1 パフォーマンス配慮
- クリティカルパスでの動的メモリ割り当ては避けること
- ホットパス上では仮想関数呼び出しを最小限にすること
- オブジェクトのコピーは必要な場合のみ行うこと（ムーブセマンティクスを使用）
- ループ内部での重い処理は事前に最適化すること
- データ局所性を意識した設計を行うこと
- メモリアライメントを適切に行い、キャッシュの効率を高めること
- SIMDベクトル化可能なコードを書くこと
- 不要なオブジェクト構築と破壊を避けること
- 条件分岐予測ヒントを適切に使用すること
- リソース集約的な操作はバックグラウンドスレッドで行うこと
- コンテナサイズの予約を適切に行うこと
- 小さなオブジェクトのプールを使用すること

### 5.2 メモリ管理
- メモリリークは絶対に許容しないこと
- カスタムアロケータを使用する場合は十分にテストすること
- メモリ破壊やバッファオーバーフローの可能性をレビューで確認すること
- サイズの大きなオブジェクトはヒープに確保すること
- メモリ量が予測可能な場合はプリアロケーションを行うこと
- バッファサイズはコンパイル時定数として定義すること
- メモリ断片化を最小限に抑えるアロケーション戦略を使用すること
- リソースの獲得は初期化時（RAII原則）を遵守すること
- スマートポインタを使用してメモリ管理を自動化すること
- メモリマップトファイルを大きなデータセットに使用すること
- カスタムSLABアロケータを頻繁に生成/破棄される小さなオブジェクトに使用すること

### 5.3 最適化戦略
- プロファイリングに基づいた最適化を行うこと
- 推測的な最適化は避け、データに基づいて判断すること
- 複雑なアルゴリズムには計算量（ビッグO）を明記すること
- コンパイラ最適化への妨げとなるコードパターンを避けること
- キャッシュフレンドリーなデータ構造を使用すること
- 分岐予測ミスを減らすコード設計を行うこと
- ロードバランシング戦略を適用して並列処理を最適化すること
- JITコンパイル向けのプロファイル主導型最適化を実装すること

## 6. セキュリティ

### 6.1 セキュリティの原則
- すべての入力は信頼せず、適切な検証を行うこと
- 整数オーバーフローのチェックを徹底すること
- メモリ管理の脆弱性に注意すること
- エラー処理を省略しないこと
- 最小権限の原則を適用すること
- デフォルト拒否の設計を採用すること
- 機密データの適切な処理と破棄を行うこと
- すべてのコードを定期的にセキュリティレビューすること

### 6.2 セキュリティの実践
- 境界チェックを常に行うこと
- ユーザー入力からのコード生成は特に厳密に検証すること
- JITコンパイル時のコードインジェクション対策を行うこと
- サンドボックス境界を明確に定義し、厳格に守ること
- コード実行領域とデータ領域の分離（W^X原則）を実装すること
- ASLR（アドレス空間配置のランダム化）を活用すること
- CFI（制御フロー整合性）チェックを実装すること
- タイミング攻撃やサイドチャネル攻撃に対する防御を行うこと
- 適切な暗号化アルゴリズムとハッシュ関数を使用すること
- 安全でないC/C++関数の使用を避けること
- メモリサニタイザを活用して脆弱性を検出すること

### 6.3 JIT固有のセキュリティ
- JITスプレー攻撃への対策を実装すること
- 生成コードの自己修正を制限すること
- コード署名と検証メカニズムを実装すること
- 実行可能メモリページの動的割り当てを最小限に抑えること
- リターン指向プログラミング（ROP）攻撃への対策を行うこと
- シェルコード実行の防止策を講じること
- JavaScript・WebAssemblyの隔離を適切に行うこと

## 7. テスト

### 7.1 テスト要件
- すべての新機能には単体テストを作成すること
- 修正したバグには回帰テストを作成すること
- パフォーマンスクリティカルなコードにはベンチマークテストを作成すること
- 境界値、エッジケース、エラーケースをテストすること
- 各テストケースは明確な目的を持つこと
- 機能特性ごとに包括的なテストケースを用意すること
- 変更に対して頑健なテストを設計すること（実装詳細ではなく動作をテスト）
- 大規模統合テストは自動化すること
- 性能テストは安定した環境で実行すること

### 7.2 テスト実装
- テストは独立して実行できること
- テストのセットアップとティアダウンは明確にすること
- グローバル状態に依存するテストは避けること
- テストでのメモリリークを確認すること
- テストコードにもコーディング規約を適用すること
- モック、スタブ、フェイクを効果的に使用すること
- テスト固有の依存関係注入メカニズムを実装すること
- 非決定的なテスト（時間依存など）は注意深く設計すること
- テスト自体もレビューの対象とすること

### 7.3 テスト種類
- **単体テスト**: 個々のコンポーネントの機能を検証
- **統合テスト**: コンポーネント間の相互作用を検証
- **システムテスト**: システム全体の動作を検証
- **パフォーマンステスト**: 速度、メモリ使用量、スケーラビリティを検証
- **負荷テスト**: 高負荷下での動作を検証
- **耐久テスト**: 長時間実行時の安定性を検証
- **セキュリティテスト**: 脆弱性を検出
- **コンフォーマンステスト**: 標準への準拠を検証

## 8. コードレビュー

### 8.1 レビュー基準
- コードは最低1人の適切な知識を持つ開発者によってレビューされること
- 以下の観点をレビューで確認すること:
  - 機能要件の充足
  - パフォーマンス
  - メモリ安全性
  - エラー処理
  - テスト網羅性
  - コーディング規約の遵守
  - セキュリティ脆弱性
  - 可読性と保守性
  - エッジケースと例外処理
  - ドキュメンテーションの完全性

### 8.2 レビュープロセス
- レビュー前にローカルでテストが通過していること
- 大きな変更は複数の小さなPRに分割すること
- レビューコメントは建設的で具体的であること
- 修正が必要なコメントには必ず対応すること
- PRの説明は変更の目的、影響範囲、テスト方法を含むこと
- レビュー対象はコードだけでなく、テスト、ドキュメント、設計も含むこと
- 自動レビューツール（静的解析、リンター）を活用すること
- 争点となる問題はオンラインでなく対面で解決すること

### 8.3 CI/CD統合
- すべてのPRにはCI/CDパイプラインでの自動テストを適用すること
- コードカバレッジレポートを生成すること
- 静的解析を自動実行すること
- パフォーマンスリグレッションを検出すること
- コミット前フックでスタイルチェックを実行すること
- デプロイプロセスを自動化すること

## 9. その他のガイドライン

### 9.1 アセンブリコード
- アセンブリコードには詳細なコメントを付けること
- プラットフォーム固有のアセンブリは明確に分離すること
- 可能な限りC++のintrinsicを使用すること
- アセンブリの各セクションの目的を明記すること
- レジスタ使用状況とスタック操作を明確に文書化すること
- 実行時アセンブリ生成コードにもコメントと検証を組み込むこと
- 異なるCPUアーキテクチャ間の違いを詳細に文書化すること
- アセンブリコードの最適化戦略を説明すること

### 9.2 デバッグ支援
- デバッグビルド時の追加検証は積極的に行うこと
- 重要な状態変更には適切なロギングを行うこと
- デバッグビルドのパフォーマンス低下は許容範囲内に保つこと
- デバッグシンボルとリリースビルドを明確に区別すること
- 条件付きコンパイルを使用してデバッグ機能を制御すること
- アサーションを効果的に使用すること（不変条件の検証）
- デバッグ用のビジュアライゼーションツールを提供すること
- クラッシュ時のコアダンプ解析ツールを実装すること
- リモートデバッグ機能を提供すること
- パフォーマンスプロファイリングを組み込むこと

### 9.3 バージョン管理とリリース
- セマンティックバージョニングを採用すること
- 重要な変更は必ずCHANGELOGに記録すること
- リリースプロセスを文書化し、自動化すること
- リリース前にはQAテストを完全に実行すること
- 機能ブランチモデルを採用し、メインブランチの安定性を保つこと
- コミットメッセージは変更内容を明確に説明すること
- ホットフィックスプロセスを定義すること
- 後方互換性を維持すること
- 非互換変更は明確に文書化し、移行ガイドを提供すること

### 9.4 ドキュメンテーション
- API仕様書を常に最新に保つこと
- 内部設計文書を作成し、維持すること
- チュートリアルとサンプルコードを提供すること
- アーキテクチャ上の決定と理由を記録すること
- パフォーマンス特性を文書化すること
- トラブルシューティングガイドを提供すること
- コードマップを維持し、新しい開発者の参入を支援すること
- ユーザードキュメントと開発者ドキュメントを分離すること
